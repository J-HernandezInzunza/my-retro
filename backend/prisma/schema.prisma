// Prisma schema for the My Retro application
// Designed for flexibility to support any retrospective format.

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

generator jsonSchema {
  provider = "prisma-json-schema-generator"
  output   = "../src/app/core"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Core Models ---

// User roles for system-wide permissions
enum UserRole {
  ADMIN   // Can create teams and manage system
  MEMBER  // Regular user
}

// Team member roles within a specific team
enum TeamMemberRole {
  FACILITATOR // Can create/manage retros and moderate sessions
  MEMBER      // Regular team member, can participate in retros
}

model Team {
  id         String   @id @default(cuid())
  name       String
  inviteCode String   @unique @default(cuid()) // Unique invite code for joining
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Multi-team relationships
  members   TeamMember[]
  sessions  RetroSession[]
  
  @@index([inviteCode])
}

model UserSession {
  id            String   @id
  displayName   String   @default("Anonymous User")
  createdAt     DateTime @default(now())
  lastActive    DateTime @default(now())

  // Optional relationship to User if/when they create a full account
  user          User?    @relation(fields: [userId], references: [id])
  userId        String?  @unique
}

model User {
  id          String   @id @default(cuid())
  email       String?  @unique // For permanent accounts
  displayName String
  role        UserRole @default(MEMBER) // System-wide role
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Multi-team relationships (removed direct teamId)
  teamMemberships TeamMember[]
  
  // Relation to user session (for upgrade path)
  userSession UserSession?

  // Existing relations
  retroItems  RetroItem[]
  votes       Vote[]
  actionItems ActionItem[] @relation("AssignedActionItems")
  
  @@index([email])
}

// Junction (Mapping) table for many-to-many User-Team relationship with roles
model TeamMember {
  id     String         @id @default(cuid())
  role   TeamMemberRole @default(MEMBER)
  joinedAt DateTime     @default(now())
  
  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String
  
  @@unique([userId, teamId]) // A user can only have one role per team
  @@index([userId])
  @@index([teamId])
}

enum RetroSessionStatus {
  ACTIVE
  COMPLETED
  ARCHIVED
}

model RetroSession {
  id             String             @id @default(cuid())
  name           String
  status         RetroSessionStatus @default(ACTIVE)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  team           Team               @relation(fields: [teamId], references: [id])
  teamId         String

  formatId       String
  format         RetroFormat        @relation(fields: [formatId], references: [id])
  items          RetroItem[]
  actionItems    ActionItem[]
}

model RetroItem {
  id           String   @id @default(cuid())
  content      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Flexible data for positioning and metadata to support any format
  positionData Json @default("{}") // e.g., { "x": 100, "y": 200 } or { "column": "start", "order": 1 }
  metadata     Json @default("{}") // e.g., { "color": "blue" }

  author       User   @relation(fields: [authorId], references: [id])
  authorId     String

  session      RetroSession @relation(fields: [sessionId], references: [id])
  sessionId    String

  votes        Vote[]
}

model Vote {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  user      User   @relation(fields: [userId], references: [id])
  userId    String

  item      RetroItem @relation(fields: [itemId], references: [id])
  itemId    String

  @@unique([userId, itemId]) // A user can only vote once per item
}

model ActionItem {
  id           String   @id @default(cuid())
  description  String
  isCompleted  Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  session      RetroSession @relation(fields: [sessionId], references: [id])
  sessionId    String

  assignedTo   User?   @relation("AssignedActionItems", fields: [assignedToId], references: [id])
  assignedToId String?
}

// --- Format Definition Model ---

// Defines the structure and rules for a type of retrospective.
model RetroFormat {
  id                String   @id @default(cuid())
  name              String   // e.g., "Start, Stop, Continue"
  slug              String   @unique // e.g., "start-stop-continue"
  description       String?
  layoutConfig      Json     // Defines visual arrangement (e.g., columns, canvas areas)
  interactionConfig Json     // Defines user actions (e.g., voting enabled, card colors)
  validationRules   Json     @default("{}") // Rules for item placement or content
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  sessions          RetroSession[]
}
